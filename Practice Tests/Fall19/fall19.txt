Justice Smith
ju644888
3218665

DS A

1.
treeNode * deleteTreeList(treeNode * root)
{
    if (root == NULL) return NULL;
    
    while (root->head != NULL)
    {
        listNode * tmp = root->head;
        root->head = root->head->next;
        free(tmp);
    }
    
    root->left = deleteTreeList(root->left);
    root->right = deleteTreeList(root->right);
    free(root);
    
    return NULL;
}
2min 29s (+2min 29s)


2.
char * toCString(node * head)
{
    if (head == NULL) return NULL; // no input string
    
    int i = 0;
    char * newString = malloc(sizeof(char) * (length(head) + 1));
    
    while (head != NULL)
    {
        newString[i++] = head->letter;
        head = head->next;
    }
    
    newString[i] = '\0';
    
    return newString;
}

10min 00s (+7min 31s)

3.

|    | |    | |    | 
|    | |    | |    | 
|    | |    | |    | 
|    | | 9  | | 5  | 
| 24 | | 4  | | 4  | 
| 12 | | 12 | | 12 | 
| 3  | | 3  | | 3  | 
|____| |____| |____| 

value of the postfix expression: 1

total: 16min 12s(+6min 12s)


22min 15s
Justice Smith
ju644888
3218665

DS B
1.
res->data = value;
res->sum = 0;
res->left = NULL;
res->right = NULL;

if (value <= root->data)
    root->left = insert(root->left, value);
else
    root->right = insert(root->right, value);

root->sum += value;

29min 16s(+7min 01s)
2.
a. element: 7
b.

            1
          /   \
         3     2
       /  \    | \
      8    5   7  11
    / |   / \  | 
   10 12 15 13 9
   
46min 26s(+17min 10s)

3.
after 98:

        (98)
        
after 87:
        
        (98)
    (87)

after 92:
        
        (92)
    (87)    (98)
    
after 81:
        
        (92)
    (87)    (98)
 (81)
 
after 75:
        
        (92)
    (81)    (98)
 (75)  (87)

after 68:
        
        (81)
    (75)    (92)
  (68)    (87)(98)
  
after 100:
        
        (81)
    (75)    (92)
  (68)    (87)(98)
                (100)
                
fewest: 3
most: 4

54min 00s(+6min 34s)

total: (31min 45s)


55min 30s
Justice Smith
ju644888
3218665

1.
a. O(n + m)
b. O(nlog(n))
c. O(n^2)
d. O(1)
e. O(m*log(n))
f. O(p)
g. O(n^2)
h. O(b)
i. O(n)
j. O(n)

1hr 03min 47s(+8min 17s)

2.
10ms = c * 10!
10ms/10! = c
c = 10ms/10!

t = 10ms/10! * 12!

t = 10ms * 132
t = 1320ms

t = 1.32s

1hr 07min 18s(+2min 31s)

3.
T(n) = 2T(n - 1) + 2^n                    for all integers n >= 1, T(0) = 1     k = 0
T(n) = 2[2T((n - 1) - 1) + 2^(n - 1)] + 2^n
T(n) = 4T(n - 2) + 2^(n + 1)                                                    k = 1
T(n) = 4[2T((n - 2) - 1) + 2^(n - 1) ] + 2^(n + 1)
T(n) = 8T(n - 3) + 2^(n + 2)                                                    k = 2


T(n) = 2^kT(n - (k + 1)) + 2^(n + k)
n - (k + 1) = 0
n = (k + 1)
n - 1 = k

2^(n - 1)T(n - n) + 2^(n + (n - 1))
2^(n - 1) + 2^(2n - 1)

1hr 18min 21s(+11min 3s)
total: 22min 51s


1hr 19min 40s

Justice Smith
ju644888
3218665

1.
int list(int * values, int k, int max)
{    
    if (k == 0) return values[k] <= max;
       
    if (values[k] <= max)
        return 1 + lis(values, k - 1, values[k] - 1);
        
    return list(values, k - 1, max);
}

1hr 27min 10s(+6min 30s)

2.

The instability comes from the last swap that is performed in the partition
function that is responsible for swapping the low and highPtr. If Sandy is 
chosen as a pivot, then Doug and Sandy will be swapped at the end of the subsort

1hr 36min 10s(+9min 00s)

3.
int count(int mask);

int bestMatch(int client, int * matches, int length)
{
    int curBest = 0;
    int idx = 0;
    
    for (i = 0; i < length; i++)
    {
        int tmp = count(client & matches[i]);
        if (tmp >= curBest)
        {
            idx = i;
            curBest = tmp;
        }
    }
    
    return idx;
}

int count(int mask)
{
    int res = 0, i;
    for (i = 0; i < 32; i++)
        if ((mask & (1<<i)) != 0)
            res++;
    return res;
}

1hr 44min 40s(+8min 30s)

total: 25min 00s

