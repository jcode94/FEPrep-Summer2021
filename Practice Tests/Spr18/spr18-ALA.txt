Justice Smith
ju644888
3218665

AL A
1.

the first iteration runs in O(n) time. 
after that iteration, the search space is cut in half each time, 

so we get a summmation of n * summation (1/2) ^i from 0 to infinity

which gives a 2n runtime which is a Big Oh runtime of O(n)

2.
200ms = c * 500^3
1ms / 625000 = c

t = 1500^3 / 625000
t = 5400ms

5.4s

3.
k = 0
T(n) = 3T(n/2) + n^2                                for n > 1, T(1) = 1

k = 1
T(n) = 3[3T(n/4) + (n/2)^2] + n^2
T(n) = 9T(n/4) + 3n^2/4 + n^2

k = 2
T(n) = 9[3T(n/8) + (n/4)^2] + 3n^2/4 + n^2
T(n) = 27T(n/8) + 9n^2/16 + 3n^2/4 + n^2

T(n) = 3^(k+1)T(n/2^(k+1)) + n^2 * summ.3/4^i

n / 2^(k + 1) = 1
n = 2^(k + 1)
k + 1 = log2n


T(n) = 3^(k+1) + n^2 * 4
T(n) = n^log3 + n^2 * 4
and since log base 2 of 3 is less than 2, the dominant power is 2

so big O is O(n^2)

1hr 29min 20s

