Justice Smith
ju644888
3218665

DS A
1.
char ** makeTVList(FILE *ifp, int numShows)
{

	char buffer[128];
	char **TVList = NULL:
	int i;

	TVList = (char **)malloc(numShows * sizeof(char *));

	for (i = 0; i < numShows; i++)
	{
		scanf("%s", buffer);
		TVList[i] = (char *)malloc((strlen(buffer) + 1) * sizeof(char)):
		strcpy(TVList[i], buffer);
	}
	
	return TVList;	
}

2.
int isFull(node *stack)
{
	if (stack == NULL) return NULL;
	
	while (stack != NULL)
	{
		stack = stack->next;
		i++;
	}
	
	if (i >= 20) return 1;
	
	return 0;
}

3.
|   |   | + |   |   |
|   |   | ( |   |   |
|   |   | - |   | / |
| ( |   | ( |   | ( |
| - |   | - |   | - |
|___|   |___|   |___|

AB+CDE+F/-G*-

messed up the last one but i had it right




Justice Smith
ju644888
3218665

DS B
1.
a.
   2
 /   \
0     10
 \    / \
  1  9   12
b.
int count(bstNode *root)
{
	if (root == NULL) return 0;
	
	return 1 + count(root->right) + count(root->left);
}  
  
c.
int leftCount = count(myTreePtr->left);

2.
a.
the heap is 8 layers tall, with 1 on the first layer, and 61 nodes on the last layer.

b.
it will be inserted as the left child of 1291.

c.
		  1447
		/      \
	  881       1291
	 /  \        /
   607  719    1609
   
		  1447
		/      \
	  881       1609
	 /  \        /
   607  719    1291
   
	  1609
	/      \
  881       1447
 /  \        /
607  719    1291

3.
a.
       42

       42
	     \
	      68
	
       42
	  /  \
	35    68
	
       42
	  /  \
	35    68
    /
   1
   
       42
	  /  \
	35    68
    /      \
   1        70
   
       42
	  /  \
	 25   68
    / \     \
   1   35    70
	 
       42
	  /  \
	25    70
   / \    / \
  1  35  68  79
  
       42
	  /  \
	25    70
   / \    / \
  1  35  68  79
         /
	   59
	   
b.
       42
	  /  \
	25    68
   / \    / \
  1  35  59  70
	   
	   
	   
Justice Smith
ju644888
3218665


AL A
1.

Avg: 		Worst:

O(1)		O(1)
O(n)		O(n), each vs every??
O(log(n))   O(n)
O(log(n))   O(log(n))
O(P + Q)    O(P + Q)


2.
t = c * (n * m * log(n))
1s = c * (2^20 * 2^5 * log(2^20))
1/(2^27 * 5) = c

t = 1/(2^27 * 5) * (2^25 * 2^9 * (log(2^25)))
t = 1/(2^27 * 5) * (2^34 * 5^2)
t = 2^7 * 5
t = 128 * 5
t = 640s
t = 10 minutes 40seconds


3.
T(n) = 2T(n/2) + n^2									T(1) = 1	k = 1
T(n) = 2T[2T(n/4) + n^2/4] + n^2													

T(n) = 4T(n/4) + n^2/2 + n^2										k = 2	
T(n) = 4[2T(n/8) + n^2/16] + n^2/2 + n^2

T(n) = 8T(n/8) + n^2/4 + 3n^2/2										k = 3

T(n) = 2^kT(n/2^k) + n^2 * summation (i = 0 to k) (1/2)^i


n = 2^k
n + n^2 * 2
O(n^2)


Justice Smith
ju644888
3218665

AL B

1.
int productDigits(int n)
{
	if (n < 10) return n;
	return n%10 * productDigits(n/10);
}

2.

6 1 12 19 4 15 27 33
1 6 12 4 15 19 27 33
1 6 4 12 15 19 27 33
1 4 6 12 15 19 27 33

b.
index: 5
value: 27
reason: all the numbers to the right of 27 are greater than 27 and
		all the number to the left are lesser.
		
3.
if (numMarked == NUMDIR)
	return 1;
int i, res = 0;
for (i = 0; i < NUMDIR; i++)
{
	int nextR = DR[i];
	int nextC = DC[i];
	
	if (inbounds(nextR, nextC) && used[R][C] == 0)
		used[nextR][nextC] = 1;
		res += countToursRec(used, numMarked + 1, curR + 1, curC + 1);
		used[nextR][nextC] = 0;
	}
}
		


